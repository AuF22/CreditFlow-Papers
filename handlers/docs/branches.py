"""Для обработки названий филиалов, это нужно чтоб правильно сохранять"""
# +==========================================================+ #
#  GitHub:       https://github.com/AuF22                      #
#  LinkedIn:     https://www.instagram.com/mr_aseev14/         #
#  Instagram:    https://www.linkedin.com/in/altynbek-aseev/   #
#                       © AuF22                                #
# +==========================================================+ #
import json
import os
from typing import Literal
from fuzzywuzzy import fuzz


def pull_branch(branch: str, save: Literal["request", "service"]) -> str:
    """
    Получаем правильные названия филиалов

    Args:
        branch (str): Название филиала которое надо обработать в зависимости от типа входных данных
        save (Literal[request, service]): В зависимости от выбора будут обрабатывать данные по разному
        'request': Обработка филиалов для заявок, она проста обычный подбор ключа для ранее заполненого словаря
        'service': Обработка филиалов для служебок, она уже сложнее и включает обработку средних размеров строки 
        и выявления оттуда названия филиалов.
        
    Returns:
        str: Чистое название филиала (Кант, Сокулук) в зависимости от сохраненных настроек
    """

    file = f"handlers{os.sep}docs{os.sep}branches.json"
    # Открываем сохраненный файл с филиалами
    # =========================================
    with open(file, "r", encoding="utf-8") as branhes:
        branhes = branhes.read()  # Чтение содержимого файла в строку
        branhes = json.loads(branhes)
        # Надеюсь объяснений не требуется
        # ============================
        if save == "request":
            try:
                return branhes[branch]
            except KeyError:
                return "Головной офис"
        # ============================
        
        # Надеюсь объяснений не требуется
        # ================================================================
        elif save == "service":                                             # В анотации все указано
            branch = branch.split(' ')                                      # Это на самом деле Служебная записка
            for word in branch:                                             # Перебор каждого слова
                if 'филиал' in word or 'предст' in word:                    # Пока не находим "филиал" или "представительство"
                    index = branch.index(word)                              # Получаем индекс слова
                    temp_branch = ' '.join(branch[index-1:index+1])         # Объединяем предыдущее слово (она всегда является филиалом)
                    _list = map(                                            # Тут уже создаем список
                        lambda x: (fuzz.partial_ratio(x, temp_branch), x),  # Который перебирает все филиалы и представительства
                        branhes                                             # И сравнивает все значения и сохраняет в список
                        )                                                   # В формате (Сходство: int, Филиал: str)
                    sorted_list = sorted(list(_list), key=lambda x: x[0])   # Сортируем список по сходству
                    return branhes[sorted_list[-1][1]]                      # Возвращаем филиал с самым большим сходством
        # ================================================================
        else:
            return None # Надеемся этого не произойдет
    # =========================================
